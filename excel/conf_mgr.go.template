package gamedata

import (
	"github.com/golang/protobuf/proto"
	"io/ioutil"
	"os"
	"reflect"
)

type {STRUCT_NAME}MgrType struct {
	dataMap 		*map[int32]*{STRUCT_NAME}
	dataArray 		*{STRUCT_NAME}Array
}

func (c *{STRUCT_NAME}MgrType) InitFromFile(basePath string) int {
	filePath := basePath + "/{DATA_FILE_NAME}"
	file, err := os.Open(filePath)
	if err != nil {
		panic(err)
		return -1
	}
	defer file.Close()

	content, err := ioutil.ReadAll(file)
	if err != nil {
		panic(err)
		return -1
	}

    c.dataMap = &map[int32]*{STRUCT_NAME}{}
	c.dataArray = new({STRUCT_NAME}Array)

    str := string(content[:])
	e := proto.UnmarshalText(str, c.dataArray)
	if e != nil {
		panic(e)
		return -1
	}

	for i := 0; i < len(c.dataArray.Items); i++ {
		d := c.dataArray.Items[i]

		ref := reflect.ValueOf(d).Elem()
		if ref.Kind() != reflect.Struct || ref.NumField() == 0 {
			return -1
		}

		for j := 0; j < ref.NumField(); j++ {
			f := ref.Field(j)
			if f.Kind() == reflect.Int32 || f.Kind() == reflect.Uint32 ||
			f.Kind() == reflect.Int64 || f.Kind() == reflect.Uint64 ||
			f.Kind() == reflect.Int {
				(*c.dataMap)[int32(f.Int())] = d
				break
			}
		}
	}

	return 0
}

func (c *{STRUCT_NAME}MgrType) GetOne(id int32) *{STRUCT_NAME} {
	if data, in := (*c.dataMap)[id]; in {
		return data
	}
	return nil
}

func (c *{STRUCT_NAME}MgrType) GetAll() []*{STRUCT_NAME} {
	return c.dataArray.Items
}
